<project name="Arcanor" basedir=".." default="main">

    <property name="src.dir"     value="src"/>
    <property name="class.dir" value="class"/>
    <property name="jar.dir"     value="jar"/>
    <property name="lib.dir"     value="lib"/>
    <property name="doc.dir"     value="doc"/>
    <property name="save.dir"   value="sauvegarde"/>
    <property name="report.dir"  value="junitReport"/>
    <property name="main-class"  value="arcanor.Partie"/>
    <property name="javadoc.dir" value="javadoc"/>

    <path id="classpath">
        <fileset dir="${lib.dir}" includes="**/*.jar"/>
        <path location="[LocalPath]/junit-4.8.2.jar"/>
    </path>

    <path id="application" location="${jar.dir}/${ant.project.name}.jar"/>

    <target name="clean">
        <delete dir="${class.dir}/arcanor ${class.dir}/test"/>
        <delete dir="${jar.dir}"/>
    </target>

    <target name="compile">
        <mkdir dir="${class.dir}"/>
        <javac srcdir="${src.dir}" destdir="${class.dir}" classpathref="classpath" includeantruntime="true"/>
        <copy todir="${class.dir}">
            <fileset dir="${src.dir}" excludes="**/*.java"/>
        </copy>
    </target>
    
    <target name="javadoc" depends="compile" description="Crée la javadoc à partir des fichiers sources">
        <javadoc sourcepath="${src.dir}" destdir="${javadoc.dir}" sourcefiles="${src.dir}/*"/>
    </target>
    
    <target name="test" depends="compile">
        <mkdir dir="${report.dir}"/>
        <junit printsummary="yes" haltonfailure="no" showoutput="yes">
            <classpath refid="classpath"/>
            <classpath location="${class.dir}"/>

            <formatter type="xml"/>

            <batchtest fork="yes" todir="${report.dir}">
                <fileset dir="${src.dir}">
                    <include name="**/*Test*.java"/>
                </fileset>
            </batchtest>
        </junit>
    </target>
    
    <target name="testReport" depends="test">
        <junitreport todir="${report.dir}">
            <fileset dir="${report.dir}" includes="TEST-*.xml">
                <include name="TEST-*.xml"/>
            </fileset>
            <report todir="${report.dir}"/>
        </junitreport>
    </target>

    <target name="jar" depends="compile, clean">
        <mkdir dir="${jar.dir}"/>
        <jar destfile="${jar.dir}/${ant.project.name}.jar" basedir="${class.dir}" excludes="**">
            
            <fileset dir="ws" excludes="build.xml" includes="**"/>
            <fileset dir="class" excludes="**/*Test*"/>

            <manifest>
                <attribute name="Main-Class" value="${main-class}"/>
            </manifest>
            
        </jar>
    </target>

    <target name="run" depends="clean-build">
        <java fork="true" classname="${main-class}">
            <classpath>
                <path refid="classpath"/>
                <path refid="application"/>
            </classpath>
        </java>
    </target>

    <target name="clean-build" depends="clean,jar"/>
    
    <target name="main" description="Affiche toutes les commandes disponibles.">
        <echo>Vous devez passer un parametre en argument. Voici les parametres disponibles :</echo>
        <echo>clean : supprime les repertoires class, javadoc et jar</echo>
        <echo>compile : compile les differents codes source et les places dans un dossier class</echo>
        <echo>javadoc : cree la javadoc pour tous les codes source</echo>
        <echo>jar : depend de compile. Cree un jar de l'applcation et le place dans un dossier jar</echo>
        <echo>run : depend de jar. Lance l'application</echo>
        <echo>test : lance tous les tests JUnit</echo>
        <echo>testReport : cree les rapports de test</echo>
        <echo>clean-build : cree le jar et supprime ensuite tous les dossiers superflus</echo>
    </target>


</project>